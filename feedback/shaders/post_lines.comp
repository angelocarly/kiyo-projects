#version 450

/*
 * Kiyo data
 * - WORKGROUP_SIZE and NUM_IMAGES are provided by the engine
 */

layout( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
layout( binding = 0, rgba8 ) uniform image2D images[NUM_IMAGES];
layout( push_constant ) uniform PushConstants
{
    float time;
    int in_image;
    int out_image;
} constants;

/*
 * User data
 */

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

vec2 hash( vec2 p ) {
    p = vec2( dot(p,vec2(127.1,311.7)),
    dot(p,vec2(269.5,183.3)) );
    //The output must be between 0.0 and 1.0
    return -1.0 + 2.0*fract(sin(p) * 43758.5453123);
}

void dda_line( ivec2 p0, ivec2 p1, vec4 color )
{
    ivec2 delta = abs( p1 - p0 );
    ivec2 step = ivec2( sign( p1.x - p0.x ), sign( p1.y - p0.y ) );
    ivec2 offset = delta / 2;
    ivec2 p = p0;
    ivec2 end = p1;
    if( delta.x >= delta.y )
    {
        for( int i = 0; i < delta.x; i++ )
        {
            imageStore( images[ constants.out_image ], p, color );
            offset.y += delta.y;
            if( offset.y >= delta.x )
            {
                offset.y -= delta.x;
                p.y += step.y;
            }
            p.x += step.x;
        }
    }
    else
    {
        for( int i = 0; i < delta.y; i++ )
        {
            imageStore( images[ constants.out_image ], p, color );
            offset.x += delta.x;
            if( offset.x >= delta.y )
            {
                offset.x -= delta.y;
                p.x += step.x;
            }
            p.y += step.y;
        }
    }
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( images[ constants.out_image ] );

    float range = 400.f;

    float t = constants.time / 3.0f;

    float size = 300.f;

    float r = hash( p ).x * 3.1415f * 2.f + t;
    ivec2 p1 = ivec2( vec2( cos(r), sin(r) ) * size ) + screenSize / 2;
    r = hash( p * 10.f ).x * 3.1415f * 2.f;
    ivec2 p2 = ivec2( vec2( cos(r), sin(r) ) * size ) + screenSize / 2;

    vec4 color = vec4( 1 ) - imageLoad( images[ constants.in_image ], ( p1 + ( screenSize / 2 ) ) / 2 );

    dda_line( p1, p2, color );
    dda_line( p1 + ivec2(1,1), p2 + ivec2(1,1), color );
    dda_line( p1 + ivec2(-1,1), p2 + ivec2(-1,1), color );
    dda_line( p1 + ivec2(-1,-1), p2 + ivec2(-1,-1), color );
    dda_line( p1 + ivec2(1,-1), p2 + ivec2(1,-1), color );
}
