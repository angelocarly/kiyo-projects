#version 450

/*
 * Kiyo data
 * - WORKGROUP_SIZE and NUM_IMAGES are provided by the engine
 */

layout( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
layout( binding = 0, rgba8 ) uniform image2D images[NUM_IMAGES];
layout( push_constant ) uniform PushConstants
{
    float time;
    int in_image;
    int out_image;
} constants;

/*
 * User data
 */

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

vec2 hash( vec2 p ) {
    p = vec2( dot(p,vec2(127.1,311.7)),
    dot(p,vec2(269.5,183.3)) );
    //The output must be between 0.0 and 1.0
    return -1.0 + 2.0*fract(sin(p) * 43758.5453123);
}

float plot_dist( float t )
{
    return t * t;
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( images[ constants.out_image ] );

    vec2 r = hash( p * constants.time / 100.0f );
    r.x += constants.time / 50.0f;
    float range = 800.f;
    ivec2 pos = screenSize / 2 + ivec2( vec2( cos( r.x * 2. * 3.1415 ) * plot_dist( r.y ), sin( r.x * 2. * 3.1415 ) * plot_dist( r.y ) ) * range );
    vec4 color = vec4( 1 ) - imageLoad( images[ constants.in_image ], pos );
    imageStore( images[ constants.out_image ], pos, color );
    imageStore( images[ constants.out_image ], pos + ivec2( 0, 1 ), color );
    imageStore( images[ constants.out_image ], pos + ivec2( 1, 0 ), color );
    imageStore( images[ constants.out_image ], pos + ivec2( 0, -1 ), color );
    imageStore( images[ constants.out_image ], pos + ivec2( -1, 0 ), color );
    imageStore( images[ constants.out_image ], pos + ivec2( -1, -1 ), color );
    imageStore( images[ constants.out_image ], pos + ivec2( -1, 1 ), color );
    imageStore( images[ constants.out_image ], pos + ivec2( 1, 1 ), color );
    imageStore( images[ constants.out_image ], pos + ivec2( 1, 1 ), color );
}
