#version 450

/*
 * Kiyo data
 * - WORKGROUP_SIZE and NUM_IMAGES are provided by the engine
 */

layout ( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
layout( binding = 0, rgba8 ) uniform image2D images[NUM_IMAGES];
layout( push_constant ) uniform PushConstants
{
    float time;
    int in_image;
    int out_image;
} constants;

/*
 * User data
 */

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

vec2 fold( vec2 p, float ang )
{
    vec2 n = vec2( cos( -ang ), sin( -ang ) );
    p -= 2. * min( 0., dot( p, n ) ) * n;
    return p;
}

vec2 rotate( vec2 p, float a )
{
    return vec2( p.x*cos( a ) - p.y*sin( a ), p.x*sin( a ) + p.y*cos( a ) );
}

float d2hline(vec2 p){
    p.x-=max( 0.f, min( 0.08f, p.x ) );
    return length(p);
}

vec2 scene( vec2 p )
{
    float pi = 3.14159;

    vec2 pt = p.xy;

    for( int i = 0; i < 9; i++ )
    {
        pt.x = abs( pt.x );
        pt = fold( pt, pi / 6. );
        pt -= vec2( 0.2, 0.0 );
        pt *= 3.;
    }

    return pt;
}

vec3 color( vec3 pos )
{
    float scale = 0.2;
    float s = fract( d2hline( scene( pos.xy ) ) * scale );
    return vec3( s );
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( images[ constants.out_image ] );
    if( p.x > screenSize.x || p.y > screenSize.y )
    {
        return;
    }

    vec3 pos = vec3( float( p.x ) / float( screenSize.x ), float( p.y ) / float( screenSize.y ), 0.0f ) - 0.5f;
    vec3 color = color( pos );

    imageStore( images[ constants.out_image ], p, vec4( color, 1 ) );
}