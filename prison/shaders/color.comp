#version 450

/*
 * Kiyo data
 * - WORKGROUP_SIZE and NUM_IMAGES are provided by the engine
 */

layout ( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
layout( binding = 0, rgba8 ) uniform image2D images[NUM_IMAGES];
layout( push_constant ) uniform PushConstants
{
    float time;
    int in_image;
    int out_image;
} constants;

/*
 * User data
 */

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

float sdf( vec3 p )
{
    return length( p ) - 20.;
}

// The normal of a point where sdf == 0
vec3 norm( vec3 p )
{
    return normalize( p );
}

struct Result
{
    vec3 color;
    float dist;
    vec3 normal;
    vec3 pos;
};
Result raymarch( vec3 p, vec3 d )
{
    float t = 0.0;
    for( int i = 0; i < 100; i++ )
    {
        vec3 pos = p + d * t;
        float dist = sdf( pos );
        if( dist < 0.001 )
        {
            vec3 n = norm( pos );
            vec3 l = normalize( vec3( -1.0, -1.0, -1.0 ) );
            vec3 c = dot( n, l ) * vec3( 1.0 );
            return Result( c, t, n, pos );
        }
        t += dist;
    }
    return Result( vec3( 0.0 ), -1.0, vec3( 0.0 ), vec3( 0.0 ) );
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( images[ constants.out_image ] );
    if( p.x > screenSize.x || p.y > screenSize.y )
    {
        return;
    }

    vec2 s_p = vec2( float( p.x ) / float( screenSize.x ), float( p.y ) / float( screenSize.y ) ) - 0.5f;

    vec3 pos = vec3( 0.0, 0.0, -80.0 );
    vec3 dir = normalize( vec3( s_p, 1.0 ) );
    Result r = raymarch( pos, dir );

    // split dist into two 8-bit values
    float d = r.dist;
    float d1 = fract( d );
    float d2 = floor( d ) / 255.0;

    imageStore( images[ constants.out_image + 0 ], p, vec4( r.color, 1 ) );
    imageStore( images[ constants.out_image + 1 ], p, vec4( r.pos, d1 ) );
    imageStore( images[ constants.out_image + 2 ], p, vec4( r.normal, d2 ) );
}
