#version 450

/* Kiyo data
 * - WORKGROUP_SIZE and NUM_IMAGES are provided by the engine
 */

layout ( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
layout( binding = 0, rgba8 ) uniform image2D images[NUM_IMAGES];
layout( push_constant ) uniform PushConstants
{
    float time;
    int in_image;
    int out_image;
} constants;

/*
 * User data
 */

/**
 *  Geometry shader
 *  Store positions and normals in a G-buffer
 */

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

struct Hit
{
    float t;
    vec3 position;
    vec3 normal;
    vec3 color;
    bool hit;
};



float sdf( in vec3 p )
{
    return length( p ) - 0.5f;
}

vec3 normal( in vec3 p )
{
    return normalize( p );
}

Hit march( in vec3 ro, in vec3 rd )
{
    Hit hit = Hit( 0.0f, vec3( 0 ), vec3( 0 ), vec3( 0 ), false );
    for( int i = 0; i < 100; i++ )
    {
        float d = sdf( ro + rd * hit.t );
        hit.t += d;
        if( d < 0.001f )
        {
            hit.position = ro + rd * hit.t;
            hit.normal = normal( hit.position );
            hit.color = palette( hit.t, vec3( 0.5f, 0.5f, 0.5f ), vec3( 0.5f, 0.5f, 0.5f ), vec3( 1.0f, 1.0f, 1.0f ), vec3( 0.0f, 0.0f, 0.0f ) );
            hit.hit = true;
            break;
        }
    }
    return hit;
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( images[ constants.out_image ] );
    if( p.x > screenSize.x || p.y > screenSize.y )
    {
        return;
    }

    vec3 screenpos = vec3( float( p.x ) / float( screenSize.x ), float( p.y ) / float( screenSize.y ), 0.0f ) - 0.5f;

    vec3 ro = vec3( 0, 0, -1 );
    vec3 rd = normalize( screenpos + vec3( 0, 0, 1 ) );

    Hit hit = march( ro, rd );

    imageStore( images[ constants.out_image ], p, vec4( hit.position, hit.hit ? 1.0f : -1.0f ) / 2.0f + 0.5f );
    imageStore( images[ constants.out_image + 1 ], p, vec4( hit.normal, 1 ) / 2.0f + 0.5f );
}