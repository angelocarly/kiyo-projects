#version 450

#define WORKGROUP_SIZE 32
layout ( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) * 43758.5453123)
#define hash3(p) fract(sin((p)*mat3(127.1,311.7, 74.7,  269.5,183.3,246.1,  113.5,271.9,124.6))*43758.5453123)

layout( binding = 0, rgba8 ) uniform image2D images[2];

layout( push_constant ) uniform PushConstants
{
    float time;
    int in_image;
    int out_image;
} constants;

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

vec2 fold( vec2 p, float ang )
{
    vec2 n = vec2( cos( -ang ), sin( -ang ) );
    p -= 2. * min( 0., dot( p, n ) ) * n;
    return p;
}

vec2 rotate( vec2 p, float a )
{
    return vec2( p.x*cos( a ) - p.y*sin( a ), p.x*sin( a ) + p.y*cos( a ) );
}

float d2hline(vec2 p){
    p.x-=max( 0.f, min( 0.08f, p.x ) );
    return length(p)*4.008;
}

vec2 scene( vec2 p )
{
    float pi = 3.14159;

    vec2 pt = p.xy;
    pt = fold( pt, pi * 0.f );
    pt -= vec2( 0.1, 0.0 );

    pt *= 3.0;
    pt = fold( pt, pi / 3.f );

    return p;
}

vec3 color( vec3 pos )
{
    float t = d2hline( scene( pos.xy ) );
    float c = fract( t ) < .5f ? 1.0f : 0.0f;
    return vec3( c );
    //return palette( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );
}

float sdf( vec3 p )
{
    float a = length( p - vec3(.8) + vec3( 0, 0, sin( constants.time * .2f ) ) ) - 1.0;
    float b = length( p - vec3(-.8) + vec3( 0, 0, sin( constants.time * .2f ) ) ) - 1.0;
    return min( a, b );
}

vec3 trace(vec3 p, vec3 d)
{
    // The point on the sphere's surface
    p = normalize( p );

    // The ray direction
    d = normalize( d );

    for( int i = 0; i < 100; i++ )
    {
        float step = 0.01;
        p += d * step;
        p = normalize( p );

        // Project normal relative to p
        vec3 n = p;
        float r = dot( d, n );
        d = normalize( d - n * r );

        if( sdf( p ) < 0.01 )
        {
            return vec3( 1 );
        }
    }

    return vec3( 0 );
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( images[ constants.out_image ] );
    if( p.x > screenSize.x || p.y > screenSize.y )
    {
        return;
    }

    vec3 pos = vec3( float( p.x ) / float( screenSize.x ), float( p.y ) / float( screenSize.y ), 0.0f ) - 0.5f;

    vec3 color = vec3( 0 );
    if( abs( length( pos ) - 0.6 ) < .01 )
    {
        color = trace( vec3(0,0,-1), vec3( normalize( vec2( pos.xy )), 0 ) );
    }

    imageStore( images[ constants.out_image ], p, vec4( color, 1 ) );
}